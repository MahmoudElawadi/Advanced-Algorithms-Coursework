import java.util.Arrays;

public class Task7 {

    public static void Sort(int[] arr) {
        int n = arr.length;

        // Build a min heap
        for (int i = n / 2 - 1; i >= 0; i--) {
            Heapify(arr, n, i);
        }

        // Extract elements from the heap one by one and place them at the end of the array
        for (int i = n - 1; i >= 0; i--) {
            // Move the root (minimum element) to the end of the array
            int temp = arr[0];
            arr[0] = arr[i];
            arr[i] = temp;

            // Re-heapify the reduced heap
            Heapify(arr, i, 0);
        }
    }

    private static void Heapify(int[] arr, int n, int i) {
        int smallest = i;  // Initialize smallest as root
        int leftChild = 2 * i + 1;  // Index of left child
        int rightChild = 2 * i + 2;  // Index of right child

        // If left child is smaller than root
        if (leftChild < n && arr[leftChild] < arr[smallest]) {
            smallest = leftChild;
        }

        // If right child is smaller than smallest so far
        if (rightChild < n && arr[rightChild] < arr[smallest]) {
            smallest = rightChild;
        }

        // If smallest is not the root
        if (smallest != i) {
            // Swap arr[i] and arr[smallest]
            int temp = arr[i];
            arr[i] = arr[smallest];
            arr[smallest] = temp;

            // Recursively heapify the affected sub-tree
            Heapify(arr, n, smallest);
        }
    }

    public static void main(String[] args) {
        int[] arr = {1,2,4,3,5};
        Sort(arr);
        System.out.println(Arrays.toString(arr));
    }
}
